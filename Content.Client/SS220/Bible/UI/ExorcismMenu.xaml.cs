// Â© SS220, An EULA/CLA with a hosting restriction, full text: https://raw.githubusercontent.com/SerbiaStrong-220/space-station-14/master/CLA.txt
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.Bible;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.SS220.Bible.UI;

[GenerateTypedNameReferences]
public sealed partial class ExorcismMenu : FancyWindow
{
    private ExorcismBoundUserInterface Owner { get; set; }

    public ExorcismMenu(ExorcismBoundUserInterface owner)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Owner = owner;

        var loc = IoCManager.Resolve<ILocalizationManager>();
        MessageInput.Placeholder = new Rope.Leaf(loc.GetString("bible-exorcism-menu-message-placeholder"));

        MessageInput.OnTextChanged += (args) =>
        {
            var len = GetLength();
            if (len < Owner.LengthMin)
            {
                ReadButton.Disabled = true;
                ReadButton.ToolTip = Loc.GetString("bible-exorcism-message-too-short");
            }
            else if (len > Owner.LengthMax)
            {
                ReadButton.Disabled = true;
                ReadButton.ToolTip = Loc.GetString("bible-exorcism-message-too-long");
            }
            else
            {
                ReadButton.Disabled = false;
                ReadButton.ToolTip = null;
            }
            RefreshLengthCounter(len);
        };

        RefreshLengthCounter();

        ReadButton.OnPressed += _ => Owner.ReadButtonPressed(Rope.Collapse(MessageInput.TextRope));
        ReadButton.Disabled = true;
    }

    public override void Close()
    {
        base.Close();
    }

    public void RefreshLengthCounter()
    {
        RefreshLengthCounter(GetLength());
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
    }

    private void RefreshLengthCounter(int length)
    {
        LengthLabel.Text = $"{length}/{Owner.LengthMin}";
    }

    private int GetLength()
    {
        return ExorcismUtils.GetSanitazedMessageLength(Rope.Collapse(MessageInput.TextRope));
    }
}
