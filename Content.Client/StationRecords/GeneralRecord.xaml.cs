using System.Numerics;
using Content.Client.Humanoid;
using Content.Client.Inventory;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Roles;
using Content.Shared.StationRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;
using Robust.Shared.Enums;

namespace Content.Client.StationRecords;

[GenerateTypedNameReferences]
public sealed partial class GeneralRecord : Control
{
    public Action<uint>? OnDeletePressed;

    private BoxContainer SetupCharacterSpriteView(GeneralStationRecord record, EntityUid previewDummy)
    {
        IEntityManager entityManager = IoCManager.Resolve<IEntityManager>();
        IPrototypeManager prototypeManager = IoCManager.Resolve<IPrototypeManager>();
        HumanoidAppearanceSystem appearanceSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<HumanoidAppearanceSystem>();

        entityManager.DeleteEntity(previewDummy);

        var profile = record.Profile ?? new HumanoidCharacterProfile();
        previewDummy = entityManager.SpawnEntity(prototypeManager.Index<SpeciesPrototype>(profile.Species).DollPrototype, MapCoordinates.Nullspace);
        appearanceSystem.LoadProfile(previewDummy, profile);
        GiveDummyJobClothes(previewDummy, record.JobPrototype, profile);

        var spriteViewFront = new SpriteView() { Scale = new Vector2(5, 5) };
        spriteViewFront.SetEntity(previewDummy);
        var spriteViewSide = new SpriteView() { Scale = new Vector2(5, 5), OverrideDirection = Direction.East };
        spriteViewSide.SetEntity(previewDummy);

        var spriteViewBox = new BoxContainer();
        spriteViewBox.AddChild(spriteViewFront);
        spriteViewBox.AddChild(spriteViewSide);

        return spriteViewBox;
    }

    private void GiveDummyJobClothes(EntityUid dummy, string jobPrototype, HumanoidCharacterProfile profile)
    {
        IEntityManager entityManager = IoCManager.Resolve<IEntityManager>();
        IPrototypeManager prototypeManager = IoCManager.Resolve<IPrototypeManager>();
        ClientInventorySystem inventorySystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<ClientInventorySystem>();

        // ReSharper disable once NullCoalescingConditionIsAlwaysNotNullAccordingToAPIContract (what is resharper smoking?)
        var job = prototypeManager.Index<JobPrototype>(jobPrototype ?? SharedGameTicker.FallbackOverflowJob);

        if (job.StartingGear != null && inventorySystem.TryGetSlots(dummy, out var slots))
        {
            var gear = prototypeManager.Index<StartingGearPrototype>(job.StartingGear);

            foreach (var slot in slots)
            {
                var itemType = ((IEquipmentLoadout) gear).GetGear(slot.Name);
                if (inventorySystem.TryUnequip(dummy, slot.Name, out var unequippedItem, true, true))
                {
                    entityManager.DeleteEntity(unequippedItem.Value);
                }

                if (itemType != string.Empty)
                {
                    var item = entityManager.SpawnEntity(itemType, MapCoordinates.Nullspace);
                    inventorySystem.TryEquip(dummy, item, slot.Name, true, true);
                }
            }
        }
    }

    public GeneralRecord(GeneralStationRecord record, bool canDelete, uint? id, EntityUid? previewDummy = null)
    {
        RobustXamlLoader.Load(this);
        RecordName.Text = record.Name;
        Age.Text = Loc.GetString("general-station-record-console-record-age", ("age", record.Age.ToString()));
        Title.Text = Loc.GetString("general-station-record-console-record-title",
            ("job", Loc.GetString(record.JobTitle)));
        Species.Text = Loc.GetString("general-station-record-console-record-species", ("species", record.Species));
        Gender.Text = Loc.GetString("general-station-record-console-record-gender",
            ("gender", record.Gender.ToString()));
        Fingerprint.Text = Loc.GetString("general-station-record-console-record-fingerprint",
            ("fingerprint", record.Fingerprint ?? Loc.GetString("generic-not-available-shorthand")));
        Dna.Text = Loc.GetString("general-station-record-console-record-dna",
            ("dna", record.DNA ?? Loc.GetString("generic-not-available-shorthand")));

        if (previewDummy.HasValue)
            AddChild(SetupCharacterSpriteView(record, previewDummy.Value));

        if (canDelete && id != null )
        {
            DeleteButton.Visible = true;
            DeleteButton.OnPressed += _ => OnDeletePressed?.Invoke(id.Value);
        }
    }
}
